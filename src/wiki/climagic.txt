ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq ./out.mpg

echo #/[\x80-\xff]
head -1 ../../screen_record-01.mkv  >>foo
echo "$(TZ=GMT date -d @0) | $(TZ=GMT date -d @$((2**31-1)))"
apt-cache search swaks
sudo apt-get install swaks
swaks --to foobar@comcast\.net --server mx1.comcast\.com --quit-after RCPT
sudo apt-get install ascii
ascii -s "show me the codes" | column -t
ascii -s "a" | column -t
ascii -s "0" | column -t
ascii -x
ascii || man ascii
find . -name '*\ *' # Find files under the current directory tree that have a space in the filename.
printf "hello" | wc -l 
#getent passwd|while IFS=: read -r user n uid n n home n;do if [[ $uid -ge 500 ]];then printf "$user ";du -sh $home;fi;done # space per user
sudo apt-get install sox
play -n synth sine 8000 bend 0.5,-1800,5 flanger 0 3 0 20 10 tri 20 quad trim 0 7 # Virtual fireworks noises (WARNING: screamer)
#play -n synth whitenoise 200 fade 0.2 1 1 trim 0 0.5 ; sleep 1 ; play -n synth whitenoise 200 fade 0 1 1 trim 0 1 # Bottle rocket sound
look frag
look .| egrep "^[a-z]{1,5}$" |while read word; do [ -e /tmp/$word ] && echo $word ; done # Maybe find file/dirs in an unreadable /tmp dir.
awk '(NR%2==0) { print $NF }' data.txt # Print the last field of every other line in the file data.txt. Use NR%2==1 for the "other" line.
printf "\xE2\x98\x95\n"
#awk '{print $4}' apache_log|sort -n|cut -c1-15|uniq -c|awk '{b="";for(i=0;i<$1/10;i++){b=b"#"}; print $0 " " b;}' # Request by hour graph.
#for vid in *.avi ; do mplayer -ao "pcm:file=${vid%%.avi}.wav:fast" -vo null "$vid" ; done # Fast extract audio track from a set of videos.
dpkg -S $( which notify-send )
#sox -m -v1 24.flac -v-1 24_CTF.flac signal.wav silence 2 5 2% # Use sox to invert track and get hidden audio signal
yes "$(seq 231 -1 16)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # A rainbow in your shell.
ls -l --time=atime 
ls -l
awk '/session opened/ {print $(NF-2)}' /var/log/auth.log 
rec -t wav - >foo.wav
play foo.wav 
#rec -t wav - | ssh remotehost play -t wav - # Remote intercom system. "Kent, this is God!"
#lsof -p 1234 |awk '{if ($4=="txt"){print $NF}}' |head -1 # Show the path to the executable that was run to start PID 1234. Need permission.
mplayer -vo png -frames 1 tv:// -tv width=1280:height=720 # Take a single 1280x720 picture of your TV input, which is often your webcam.
qiv 00000001.png 
df -hP |column -t |tee >( head -n1 > /dev/stderr ) |grep % |sort -k5nr # Order filesystems by percent usage and keep header in place.
function box(){ t="$1xxxx";c=${2:-=}; echo ${t//?/$c}; echo "$c $1 $c"; echo ${t//?/$c}; } # Make box around text
box text
#awk '{a[$1] += $10} END {for (h in a) print h " " a[h]}' access_log | sort -k 2 -nr | head -10 # Display top bandwidth hogs on website.
lsof -i TCP:80 # Show what processes are using port 80 either locally or remotely. Need to be root for unowned processes.
apt-cache search xdotool
#x=0;y=0;while [[ $y -lt 500 ]] ; do xdotool mousemove --polar $x $y ; x=$(($x+3));y=$(($y+1)); sleep 0.001; done # Mouse spiral
sudo apt-get install xdotool
ssh bandit0@bandit.labs.overthewire.org
for i in {A..Z}; do echo $i; done |nl |grep "[XKCD]" |awk '{sum+=$1} END {print sum}' # The real meaning of #XKCD
echo "scale=10; 3.1415926535 * (1337.0/100.0)" | bc 
printf '%d\n' "'*"  # returns "42"
#tar xvf program-1.2.3.tar.gz ; cd ${_%%.tar.gz} # Untar a program file and cd into the directory it created without the .tar.gz extension.
#!#:$:s/.png/.jpg/
for f in *.wav; do lame --vbr-new -V 3 "$f" "${f%.wav}.mp3"; done # Convert to mp3.
for f in *.wav; do lame --vbr-new -V 3 "$f" "${f%.wav}.mp3"; done # Convert to mp3.
#xmodmap -e "keycode 166 = 0x0000" -e "keycode 167 = 0x0000" # Disable the Back/Forward keys 
#find . -maxdepth 1 -name '*.svg' |while IFS=$'\n' read f ; do inkscape "$f" --export-png="PNG/${f%%.svg}.png"; done # SVG 2 PNG in CWD.
play -q -n synth sine F2 sine C3 remix - fade 0 4 .1 norm -4 bend 0.5,2399,2 fade 0 4.0 0.5
echo '(play -q -n synth sine F2 sine C3 remix - fade 0 4 .1 norm -4 bend 0.5,2399,2 fade 0 4.0 0.5 &)' >> ~/.bashrc # THXsh startup sound.
#find ./music -name \*.mp3 -exec cp {} ./new \; # Idea: Backslashing the * glob instead of quoting the expression
tarbomb(){ [[ $( tar tf "$1" |sed 's,^\./,,' |awk -F/ '{print $1}' |sort |uniq |wc -l ) -eq 1 ]] && echo "OK" || echo 'Tarbomb!'; } # Detect
tarbomb ~/tmp/supercat-0.5.5.tar.gz 
#while [[ $( date +%A ) != "Friday" ]]; do echo Its not Friday yet ; sleep 1h ; done ; echo "Yea Friday" # Its not Friday yet?
#find ~/path/to/files -mmin -2 -execdir mv -t ./target/ {} + # Move all files modified in the last 2 mins to ./target
#42 = 101010 in binary
#diff <(cd dir1 ; ls -1 | sort) <(cd dir2 ; ls -1 | sort) # Show the differences between two directories. comm can also be good for this
last -da | egrep -v "^(root|reboot|asmith) " # See the last logged in users, but filter out entries for root, reboots and asmith.
grep -o --binary-files=text '[[:alpha:]]' /dev/urandom |tr -d '[a-zA-Z]' |xargs -n $(($COLUMNS/2)) |tr -d ' '| lolcat -f | pv -L80k # 4fun
#egrep -v "(^#|^\ *$)" httpd.conf | less # Only view the active configuration in a heavily commented httpd.conf file.
egrep -v "(^#|^\ *$)" /etc/apache2/apache2.conf|less
sed -ni '1h;1!p;${x;p}' queuefile  # move 1st line to last
vi queuefile
echo a b c c d e f
convert -quality 75 foo.jpg !#:$:s/.jpg/.png/
echo foo bar !#:$:s/bar/baz/
join -o 1.1,2.2,1.3,1.4,1.5,1.6,1.7 -1 1 -2 1 -t: passwd shadow

==February 2015==
if [ -x `which screen` ]; then screen -q -ls; [ $? -ge 10 ] && screen -ls; fi #in .profile, lists screen sessions on login
tmux list-sessions 2> /dev/null # Put this in your .bashrc so that on login it will list your tmux sessions. If none, don't show the error.
grep -o -P "(?<=CRON\[)\d+" /var/log/syslog # GNU grep supports perl regex expressions. This gives only the PID on CRON lines in syslog.
sudo shutdown -h 60 & mpg123 ambientmusic/*.mp3 # Play music for 60 minutes and then shutdown. Like sleep on alarm clock.
kill -USR1 $( pidof dd ) # In Linux, find running dd processes and send them a signal to print out their progress.
[ -f /etc/shadow ]&&while :;do N=$(($RANDOM%$(tput cols)));for i in $(seq 1 $N);do echo -n " ";done;echo \*;done # Happy Groundhog Day!
apt-file search /usr/bin/apxs2 # On Debian, find out which non-installed package provides a file. Need to install apt-file package first.
comm -23 <(grep -rl foo . |sort) <(grep -rl bar . |sort) # When adding "bar" to project, which files contain foo but not bar?
dig +short txt linux.wp.dg.cx # http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns
dig @8.8.8.8 +short txt linux.wp.dg.cx
time read  # press enter after a given amount of time to get time elapsed

==March 2015==
pwgen 12
convert -crop 150x750+100+150 dress.jpg txt: | grep "black|#[01].[01].[01]." # See if there is any black in a 150x750 crop of an image.
n=(C D E F G A B "C4 ");stat -c%a *|while read -n1 k;do x=${n[$k]};sleep .2;play -qn synth pl ${x}3 fade 0 1 & done # Listen to permissions
pmd5(){ xsel -p|md5sum|cut -d' ' -f1;}; while :;do if [[ "$l" != "$( pmd5 )" ]];then xsel -p;echo;l=$( pmd5 );fi ;sleep .25;done # paste chk
find . -maxdepth 1 -type f -printf '%TY-%Tm\n' | sort | uniq -c # Counts files in the current path by modification month.
find hosts -name auth.log -o -name secure.log | xargs ls -ltra # Find logs for auths under hosts dir and list them by last modified time.
grep -oP "\w{8}(-\w{4}){3}-\w{12}" # return all UUIDs in a given file (e.g., a log file)
while [[ $(pgrep -c -f "ssh " ) -le 20 ]]; do sleep 10; done; echo "There is a problem" # Do something special number of ssh processes > 20
grep -r 'for <me@host>' . |awk -F\; '{print $2}'|while read -r date; do date -d "$date" +%Y-%m-%d ; done > dates-Ymd # E-mail reformat dates
https://www.digitalocean.com/community/tutorials/top-10-linux-easter-eggs
Privacy: Tor, Tox, SpiderOak, ProtonMail, Tails

==sed==
* Print every Nth line (to a maximum)
function every() { sed -n -e "${2}q" -e "0~${1}p" ${3:-/dev/stdin}; } # 

Print selected lines from a file or the output of a command.

Usage:
every NTH MAX [FILE]

Print every NTH line (from the first MAX lines) of FILE.

If FILE is omitted, stdin is used.

The command simply passes the input to a sed script:
sed -n -e "${2}q" -e "0~${1}p" ${3:-/dev/stdin}

print no output
sed -n

quit after this many lines (controlled by the second parameter)
-e "${2}q"

print every NTH line (controlled by the first parameter)
-e "0~${1}p"

take input from $3 (if it exists) otherwise use /dev/stdin
{3:-/dev/stdin} 

==IRC+expect==
* Bare Metal IRC Client

 $ nik=clf$RANDOM;sr=irc.efnet.org;expect -c "set timeout -1;spawn nc $sr 6666;set send_human {.1 .2 1 .2 1};expect AUTH*\n ;send -h \"user $nik * * :$nik commandlinefu\nnick $nik\n\"; interact -o -re (PING.:)(.*\$) {send \"PONG :\$interact_out(2,string)\"}"

:Uses the extremely cool utilities netcat and expect.
:"expect" logs in & monitors for server PING checks.
:When a PING is received it sends the PONG needed to stay connected.
:IRC commands to try: HELP, TIME, MOTD, JOIN and PRIVMSG
:The "/" in front of IRC commands are not needed, e.g. type JOIN #mygroup
:Learn about expect: http://tldp.org/LDP/LGNET/issue48/fisher.html
:The sample output shows snippets from an actual IRC session.

==Free Cloud Shell==

* Get a free shell account on a community server

Bash process substitution which curls the website 'hashbang.sh' and executes the shell script embedded in the page.

Download locally over SSL

> curl https://hashbang.sh >> hashbang.sh

Verify integrty with GPG (If available)

> gpg --recv-keys 0xD2C4C74D8FAA96F5
> gpg --verify hashbang.sh

Inspect source code

> less hashbang.sh

Run

> chmod +x hashbang.sh
> ./hashbang.sh

==ubuntu==
dpkg-awk -f=/var/lib/dpkg/available "Package:^[aA]s.*" -- Package Version
dpkg -l | awk '/^ii/ {print $2, $3}'
dpkg -l | awk -FS="\t" '/^ii/ {print $2, $3}'|head
dpkg -l | awk '/^ii/ {print $2, $3}' |head
apt-config dump | less
aptitude search ~o
dpkg --get-selections | head
dpkg-query -Wf '${Package}\t${Version}\n'|head

==External links==
* http://overthewire.org/wargames/bandit/
* http://howfuckedismydistro.com/
* http://vim-adventures.com/
* http://www.climagic.org/txt/difference-between-bash-shell-last-argument-reference-methods.html

==Timing out in a shell script==
I have a shell script that's reading from standard input. In rare circumstances, there will be no one ready to provide input, and the script must time out. In case of timeout, the script must execute some cleanup code:

 foo=`{ { cat 1>&3; kill 0; } | { sleep 2; kill 0; } } 3>&1`

That is: run the output-producing command and sleep in the same process group, a process group just for them. Whichever command returns first kills the whole process group.

Would anyone wonder: Yes, the pipe is not used; it's bypassed using the redirections. The sole purpose of it is to have the shell run the two process in the same process group.

As Gilles pointed out in his comment, this won't work in a shell script because the script process would be killed along with the two subprocess.

One way¹ to force a command to run in a separate process group is to start a new interactive shell:

 #/bin/sh
 foo=`sh -ic '{ cat 1>&3; kill 0; } | { sleep 2; kill 0; }' 3>&1 2>/dev/null`
 [ -n "$foo" ] && echo got: "$foo" || echo timeouted

But there might be caveats with this (e.g. when stdin is not a tty?). The stderr redirection is there to get rid of the "Terminated" message when the interactive shell is killed.

Tested with zsh,bash and dash.

==April 2015==
for i in /usr/share/cowsay/cows/*.cow; do cowsay -f $i "$i"; done # show all cows
awk '!NF || !seen[$0]++' # remove duplicate lines whilst keeping order and empty lines
truncate --size 1G bigfile.txt # Create arbitrary big file full of zeroes but done in a second
truncate -s0 file.txt # zero out/empty file.txt
dd if=/dev/zero of=foo.txt bs=1M count=1 # Create a file of a given size in Linux
dd if=/dev/zero of=sparse_file bs=1024 skip=1024 count=1 # Create a file of a given size in Linux (If you're trying to create a sparse file, you can use dd by 'skip'ing to the last block instance.)
curl -H"host: mars" http://localhost

* Using awk to sum/count a column of numbers:
cat count.txt | awk '{ sum+=$1} END {print sum}'
numsum count.txt
echo $(( $( cat count.txt | tr "\n" "+" | xargs -I{} echo {} 0 ) ))

* Display the top ten running processes - sorted by memory usage:
ps aux | sort -nk +4 | tail
ps aux --sort -rss | head
ps axo %mem,pid,euser,cmd | sort -nr | head -n 10

look . |grep ph |while read w; do espeak -qx "$w"|grep -q f||echo "$w"; done # Find ph words where the ph is not pronounced as 'f'
for u in example/bc{3,8}449{0,8,9}2-ab7a-1{3,8}03; do curl -sI $u|grep -q 404||echo $u; done # Try finding the URL given a fuzzy screenshot.
LESS="+/ass," man mplayer # Open mplayer man page and search for 'ass,'.
iptables -I INPUT -s $(cut -d' ' -f1 <<<$SSH_CLIENT) -m time --datestop $(date --iso-8601=seconds --date="2 hours" | cut -d+ -f1) -j ACCEPT
find "$dir" -name '*.txt' -print0|xargs -0 grep -FwiHc $word|sort -rn -t: -k2 # Find *.txt in $dir sorted by lines with $word
gawk '{gsub("0","",$1);a[$1]+=$2} END {for (p in a){print p " " a[p]}}' resistors.txt # Sum instance counts by start set of non-zero numbers
googlesay(){ curl -A RG translate\.google\.com/translate_tts -d "tl=en&q=$*" |mpg123 -; }; # Usage: googlesay "How are you?"
n=('' E4 B3 G3 D3 A2 E2);while read -n1 -p 'string? ' i;do case $i in [1-6]) play -n synth pl ${n[$i]} fade 0 1 ;; *) echo;break;;esac;done
rm -fv /somedir | tee remove.log  # When you want to see output AND save it, try "| tee" of just a ">" redirect.
date -d @$(grep ^btime /proc/stat | cut -d" " -f 2) # On Linux, show the exact time/date the system was last booted.
zgrep -A100 -P "(?<= status: )(?!NOERROR)" 99.*.gz # Use Perl regex to find cases of status: NOT followed by NOERROR in dig output files.
:'<,'>!sort |column -t # In vim, after using something like 'v' to select a range of lines, you can pass the range of lines through commands
find . -type l | (while read FN ; do test -e "$FN" || ls -ld "$FN"; done) # Find broken symlinks.
select mus in *.mp3 ; do mpg123 "$mus" ; done # Multiple choice music player.  Type the number of the song you want to hear.
echo $(( ( $( date -d '2031-06-28' +%s ) - $( date +%s ) ) / 86400 )) days until Tau day # See http://www.tauday.com
printf "%d\n" {1..12} | xargs -n1 -I{} date -d "2015-{}-13" | grep ^Fri # How many Friday the 13ths are there this year.
while true ; do cp -va *.dat /tmp/saveit/ 2> /dev/null ; sleep 0.05 ; done # Try catching a file that shows up temporarily in a queue.
find . -mtime +$(date +%j) -ls | awk '{sum+=$7} END {print sum}' # How much space files older than the present year are using. %j=Julian day
find /data -maxdepth 1 -type d -mtime +7 -name '20??????' -exec rm -vf {} + # Remove data dirs with specific length names older than 7 days
dd if=/dev/sda bs=1G count=80 |pv -s80G |pbzip2 -c |ssh user@remote 'cat > /tmp/sda-80GB.bz2' # First 80GB of sda to remote host w/ progress
yes "$(seq 231 -1 16)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # A rainbow in your shell.
mplayer --vf=geq='128+(p(X\,Y)-128)*8' tv:// # Alternate dimension with your webcam. 
mplayer --vf=geq='p(X\,Y)*gt(W/2\,X)+p(W-1-X\,Y)*lt(W/2-1\,X)' tv:// # Another fun video trick. Mirror right side of video to left.
showconsolefont
localectl status  # SEE: https://wiki.archlinux.org/index.php/Keyboard_configuration_in_console
http://forums.fedoraforum.org/archive/index.php/t-289489.html
n=CDEFGAB;l=asdfghj;while read -n1 k;do x=$(tr $l $n<<<$k);play -qn synth pl ${x}3 fade 0 .7 & done # Poly synth. Press asdfghj
strace -e open vpnc # View the 'open' system calls made by a program called vpnc. strace = window into program functionality
perl -e 'for(;;sleep 1){printf"\r"."%.4b "x6,split"",`date +%H%M%S`}' # binary clock
timeDNS() { parallel -j0 --tag dig @{} "$*" ::: 208.67.222.222 208.67.220.220 198.153.192.1 198.153.194.1 156.154.70.1 156.154.71.1 8.8.8.8 8.8.4.4 | grep Query | sort -nk5; } # a function to find the fastest free DNS server
fold -sw 20 <(echo "Long Text to be wrapped with \"\n\"") |sed ':a;N;$!ba;s/ *\n/\\n/g' # Wordwrap long text string using "\n"
awk -F"|" 'BEGIN {OFS="|"} NR==1 {for (b=1;b<=NF;b++) {hdr[b]=$b} } NR > 1 {for (i=1;i<=NF;i++) {if(length($i) > max[i]) max[i] = length($i)} } END {for (i=1;i <= NF;i++) print hdr[i],max[i]+0}' pipe_delimited_file.psv # Show max lengths of all fields in a pipe delimited file with header row
docker stop $(docker ps -a -q); docker rm $(docker ps -a -q) # Docker.io Stop and Remove all processes
netstat -anp | grep :80 | grep ESTABLISHED | wc -l # Get number of established sessions on a given port
debugfs -R  "stat <$(stat --printf=%i filename)>" /dev/sdaX | grep crtime # Get creation date of a file on ext2-3-4 fs
runonchange () { local cmd=( "$@" ) ; while inotifywait --exclude '.*\.swp' -qqre close_write,move,create,delete $1 ; do "${cmd[@]:1}" ; done ; } # Run a command if file/directory changes. Example: `runonchange /etc/nginx nginx -t`; Ignores vim temp files. Depends on 'inotify-tools' for monitoring of file changes. Alternative to tools like 'entr', 'watchr'.
awk '{print $0+0}' <(echo -2; echo +3;) #  Removing leading + sign from numbers. The leading plus sign is removed - Minus sign is left intact.
a=$(b=$(($LINES/2));f() { for c in $(seq $b); do for i in $(seq $c);do echo x;done|xargs echo;done };paste <(f) <(f|tac|tr 'x' '-') <(f|tac|tr 'x' '-') <(f)|tr '\t' ' ');(cat <<<"$a"|tac;cat <<<"$a")|tr '-' ' ' # draw rhomb
watch -n 10 -d eval "sensors | grep RPM | sed -e 's/.*: *//;s/ RPM.*//'" # Periodic Display of Fan Speed with Change Highlights
ssh host -t htop
while :;do printf "\e[%d;%dH\e[48;5;%dm \e[0m" $(($RANDOM%$LINES)) $(($RANDOM%$COLUMNS)) $(($RANDOM%216 )); done
ls -Sharl # Long list all(a) files(l) in CWD, ordering by size(S) ascending(r) and displaying size in human readable form(h)
Dec2Bin=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}); echo ${Dec2Bin[27]} # Decimal to binary conversion in bash
mplayer -ao null -vo null --endpos=0.1 *.mp4 | grep VIDEO # Play enough of the video to get the VIDEO dimensions
find [a-z] -mtime +90 -type f -name '*_log' -exec bzip2 -v9 {} \; # bzip2 compress 90+ day old log files under directories a - z
last -da | awk '{print $1 " " $NF}' | sort | uniq -c # Analyze your whole Linux lastlog to see the different remote hosts for each user

* cd to a dir by passing /path/to/file.txt (assuming you still want to retain the original functionality if you input a directory, and you are using bash):

<pre>
cd() {
    local file="${!#}"

    if (( "$#" )) && ! [[ -d "$file" ]]; then
        builtin cd "${@:1:($#-1)}" "${file%/*}"
    else
        builtin cd "$@"
    fi
}

If you are never going to use cd's options (-P, etc), then this will also suffice:

cd() { 
    if [ -d "$1" ] || [ -z "$1" ]; then
        builtin cd "$@"
    else
        builtin cd "${1%/*}"
    fi
}
</pre>

* Advanced xargs:
<pre>
du1() { find . -mindepth 1 -maxdepth 1 -type d -print0 | xargs -P5 -0 -iFF sh -c '( echo `du -sb "FF"` `du -sh "FF"` | sed -e "s%^\([0-9]*\)\ \([^ ]*\)\ \([^ ]*\).*$%\1 \3 \2%g" )' | sort -n | cut -d ' ' -f2,3 | command grep --color=always '^[0-9\.]*[GMK]'; }

du2() { find . -maxdepth 1 -mindepth 1 -type f | tr ' ' "\n" | xargs -P20 -iFF sh -c 'sed -e "s%^\([0-9]*\)\ \([^ ]*\)\ \([^ ]*\).*$%\1 \3 \2%g" <<< $( echo "`( du -sb FF && du -sh FF ) | tr --squeeze \t\n `" )' | sort -n | tail -n 20 | awk '{print $2,$3}' | tr ' ' "\t";}
</pre>

==World population==
* Fetch the current human population of Earth:
 $ curl -s http://www.census.gov/popclock/data/population/world | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["world"]["population"]'
 #~OR~
 $ curl -s http://www.census.gov/popclock/data/population/world | awk -F'[:,]' '{print $7}'
 $ curl -s http://www.census.gov/popclock/data/population/world | jshon -e world -e population -u
 $ perl -Mojo -E 'say g("http://www.census.gov/popclock/data/population/world")->json->{'world'}{'population'};'
 #~SOURCE: http://www.commandlinefu.com/commands/view/12542/fetch-the-current-human-population-of-earth

==Google Translate==
* Google text-to-speech in mp3 format:
 t2s() { wget -q -U Mozilla -O $(tr ' ' _ <<< "$1"| cut -b 1-15).mp3 "http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=$(tr ' ' + <<< "$1")"; }
 curl -A "Mozilla" "http://translate.google.com/translate_tts?tl=en&q=$(echo "$@" | sed 's/ /+/g')" | play -t mp3 -
 $ p=$(echo "hello world, how r u?"|sed 's/ /+/g');wget -U Mozilla -q -O - "$@" translate.google.com/translate_tts?tl=en\&q=$p|mpg123 -
 #~SOURCE: http://www.commandlinefu.com/commands/view/12828/google-text-to-speech-in-mp3-format

==OS installed==
* When was your OS installed?
 $ ls -lct /etc | tail -1 | awk '{print $6, $7, $8}'
 #~OR~
 $ df / | awk '{print $1}' | grep dev | xargs tune2fs -l | grep create
 $ ls -ldct /lost+found |awk '{print $6, $7}'
 #~SOURCE: http://www.commandlinefu.com/commands/view/3299/when-was-your-os-installed

==May 2015==
ls /path/to/file.txt ; cd $(dirname !$)  # cd to path
whois root\.com | grep -E "Registrant (City|State|Country)"
curl -s xtof.ch|perl -0777 -pe 's/<.*?>//sg'
echo -e ${PATH//:/\\n}
dig @8.8.8.8 +nocl +nostats +nocomment +recurse +multiline +besteffort +additional +noqr -t ANY xtof.c
dig +short which.opendns.com txt @208.67.220.220 # Check if your ISP is intercepting DNS queries ("#.abc" it's an OK answer) [http://www.commandlinefu.com/commands/view/13142/check-if-your-isp-is-intercepting-dns-queries]
sudo strace -p <PID> -e trace=write -e write=1,2 # hook into stdout and stderr of a running process.
ls -l --time=atime --full-time *.txt # Show the last access time of all files ending with .txt. This may not work on all filesystems/setups.
find . -maxdepth 1 -size 0c -delete # Remove all zero size files from current directory (not recursive).
find . -maxdepth 1 -empty -delete # Remove all zero size files from current directory (not recursive).
taskset -cp <core> <pid> # Change proccess affinity. Set the affinity of a process to a particular core(s). Arguments for processor include a comma separated list, or a range. (example: 1,2 or 0-3). You can use top in smp mode (Press 1) to see the changes to the affinity.
dd if=/path/inputfile | pv | dd of=/path/outpufile # Start dd and show progress every X seconds.
perl -e 'for(;;){@d=split("",`date +%H%M%S`);print"\r";for(0..5){printf"%.4b ",$d[$_]}sleep 1}' # binary clock [http://www.commandlinefu.com/commands/view/7221/binary-clock]
qrencode -s 7 -o qr-wifi.png "WIFI:S:$(zenity --entry --text="Network name (SSID)" --title="Create WiFi QR");T:WPA;P:$(zenity --password --title="Wifi Password");;" # Generate QR code for a WiFi hotspot  [http://www.commandlinefu.com/commands/view/13028/generate-qr-code-for-a-wifi-hotspot]
dpigs  # List your largest installed packages (on Debian/Ubuntu); "debian-goodies" pkg
 -> dpkg --get-selections | cut -f1 | while read pkg; do dpkg -L $pkg | xargs -I'{}' bash -c 'if [ ! -d "{}" ]; then echo "{}"; fi' | tr '\n' '\000' | du -c --files0-from - | tail -1 | sed "s/total/$pkg/"; done
 -> dpkg-query -W --showformat='${Installed-Size}\t${Package}\n' | sort -nr | less
 -> awk '{if ($1 ~ /Package/) p = $2; if ($1 ~ /Installed/) printf("%9d %s\n", $2, p)}'  /var/lib/dpkg/status | sort -n | tail
 #~SOURCE: http://www.commandlinefu.com/commands/view/3907/list-your-largest-installed-packages-on-debianubuntu
while true ; do nc -l 80  < index.html ; done # One command line web server on port 80 using nc (netcat)
 -> nc -kl 5432 -c 'echo -e "HTTP/1.1 200 OK\r\n$(date)\r\n\r\n";echo "<p>How are you today?</p>"'
sed -e "/$USER/d;s/:.*//g" /etc/group # Tells which group you DON'T belong to (opposite of command "groups")
while true; do X=$Y; sleep 1; Y=$(ifconfig eth0|grep RX\ bytes|awk '{ print $2 }'|cut -d : -f 2); echo "$(( Y-X )) bps"; done # Measures download speed on eth0
openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//' # Generate a Random MAC address
 -> hexdump -n6 -e '/1 ":%02X"' /dev/random|sed s/^://g
 -> od -An -N10 -x  /dev/random  | md5sum | sed -r 's/^(.{10}).*$/\1/; s/([0-9a-f]{2})/\1:/g; s/:$//;'
 #~SOURCE: http://www.commandlinefu.com/commands/view/6619/generate-a-random-mac-address
rename 's/\d+/sprintf("%04d",$&)/e' *.jpg # Numeric zero padding file rename
 -> ls *.jpg | awk -F'.' '{ printf "%s %04d.%s\n", $0, $1, $2; }' | xargs -n2 mv
 -> for i in $(seq -w 0 100) ; do mv prefix$(( 10#$i )).jpg prefix${i}.jpg ; done
 #~SOURCE: http://www.commandlinefu.com/commands/view/8383/numeric-zero-padding-file-rename
dmesg -T|sed -e 's|\(^.*'`date +%Y`']\)\(.*\)|\x1b[0;34m\1\x1b[0m - \2|g' # dmesg with colored human-readable dates
namei -m $(pwd) # Show permissions of current directory and all directories upwards to /
 -> dir=$(pwd); while [ ! -z "$dir" ]; do ls -ld "$dir"; dir=${dir%/*}; done; ls -ld /
 #~SOURCE: http://www.commandlinefu.com/commands/view/11037/show-permissions-of-current-directory-and-all-directories-upwards-to-
sort -g -o list.txt{,} # sort the contents of a text file in place
 -> sort -g -o list.txt !#:$ # history expansion
 -> sort -g list.txt -o !#:2
 -> sort -g list.txt -o !^ # '!^' => first arg; '$_' => last arg
bind -P | grep -v "is not" | sed -e 's/can be found on/:/' | column -s: -t # List all bash shortcuts
compgen -A function # List bash functions defined in .bash_profile or .bashrc
 -> declare -F | cut -d ' ' -f 3
 -> typeset -f
 -> set | fgrep " ()"
 -> declare -F | sed 's/^declare -f //'
nmap -sP 192.168.1.0/24; arp -n  | grep "192.168.1.[0-9]* *ether" # find all active IP addresses in a network
tail -f file | while read; do echo "$(date +%T.%N) $REPLY"; done # Annotate tail -f with timestamps
 -> tail -f file | ts '%H:%M:%.S'
for i in ?.ogg; do mv $i 0$i; done # convert single digit to double digits
 -> rename 's/\d+/sprintf("%02d",$&)/e' -- $@
(find /one -print0; find /two -print0)|tar cvf backup.tar --null -T - # Use a subshell to generate a complex list of files for tar
dpkg --print-architecture
mat -d /path/to/file.jpg
findmnt
lscpu || chcpu
tarcat # concatenates the pieces of a GNU tar multi-volume archive
while :; do play -qn synth sin 14k trim 0 0.75 vol .8 ; sleep $((RANDOM % 4 + 3))m ; done # Poor man's annoy-a-tron. 3 - 6 min interval.
rename 's/_(\d{4})(\d{2})(\d{2}).txt/_$1-$2-$3.txt/' *_????????.txt # Rename set of files with non-hyphenated date to be hyphenated.
base64 -d<<<TVRoZAAAAAYAAQABAYBNVHJrAAAAOgD/UQOAAAAAkEV/CIBFfwCQRX8IgEV/AJBKfwiASn8AkEx/CIBMfwqQSX8IgEl/AJBKfwiASn//LwA= |timidity - # Log!
cut -c1-3 boot.log | uniq -c # (Unrotated log) Count the number of lines per month in boot.log.
du -ch --exclude=./relative/path
echo "ibase=10;obase=16;500000"|bc # ibase = input base 10; obase = output base 16 => 7A120 => 07 A1 20

==June 2015==
gpg --gen-random --armor 1 8  # generate a random password n characters long
 -> strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
 -> strings /dev/urandom | tr -cd '[:alnum:]' | fold -w 30 | head -n 1
 -> pwgen 8 1
 -> cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 8
 -> openssl rand -base64 8
ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed "/^ 0.0 /d" # Processes by CPU usage
 -> top -b -n 1 | sed 1,6d
function google { Q="$@"; GOOG_URL='https://www.google.de/search?tbs=li:1&q='; AGENT="Mozilla/4.0"; stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||'); echo -e "${stream//\%/\x}"; } # Google verbatim search on your terminal
 -> Q="YOURSEARCH"; GOOG_URL="http://www.google.com/search?q="; AGENT="Mozilla/4.0"; stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}\"${Q/\ /+}\"" | grep -oP '\/url\?q=.+?&amp' | sed 's/\/url?q=//;s/&amp//'); echo -e "${stream//\%/\x}"
twistd -n web --path . # Serve current directory tree at http://$HOSTNAME:8080/
 -> python -m SimpleHTTPServer
echo $(($(blockdev --getsz /dev/sdXXX)*512/4096 - 35)) # Calculate the block number at the end of the drive
tree -a -L 1 --inodes /path # Display inodes
xxd -p source | fold -w2 | paste -sd' ' | sed "s/A/B/g" | xxd -p -r > destination # Binary search/replace
cmp -l foo.mid bar.mid | gawk '{printf "%08X %02X %02X\n", $1, strtonum(0$2), strtonum(0$3)}' # Binary diff
 -> diff <(xxd foo.mid) <(xxd bar.mid)
 -> diff <(od -An -tx1 -w1 foo.mid) <(od -An -tx1 -w1 bar.mid)
 #   -An removes the address column. This is important otherwise all lines would differ after a byte addition / removal.
 #   -w1 puts one byte per line, so that diff can consume it.
 #   -tx1 is the representation you want, change to any possible value, as long as you keep 1 byte per line.
sort -V ipv4addrs.txt # In GNU sort, you can use -V (version sort) to also sort IPv4 addresses numerically according to each class.
find /dev/disk/by-id -type l -printf "%l\t%f\n" | cut -b7- | sort # Show drive names next to their full serial number (and disk info)
grep MemTotal: /proc/meminfo | awk '{printf("MemTotal: %d MB\n", $2/1024)}' # Display how much memory install on system
nmcli connection status <UUID> # network connection status
if [[ $(expr $(date +%s) - $(stat -c %X /var/lib/apt/periodic/update-success-stamp)) -gt 86400 ]]; then # debian based OS update apt/dpkg only if it hasn't been updated in N time
printf '=%.0s' {1..100} # repeat a character
cat -vet file.txt # show non-Unix characters
 -> tr -d '\r' < file.txt # delete "cr" characters
YOUTUBE: allinurl:[your word here] site:youtube.com/watch
du -h *.png --total|tail -n1
identify -format "%wx%h" image.png # get image dimensions
 -> php -r "print_r(getimagesize('/path/to/image.png'));"
 -> mediainfo image.png
 -> exiftool image.png
 -> exiv2 image.png
 -> feh -l image.png
 -> less image.png # less (with lessfile/lesspipe) displays image info by using ImageMagick in the background
 -> convert image.jpg -print "Size: %wx%h\n" /dev/null
echo $((0xff)) # => 255 # convert hexademicals
echo $PATH | sed 's/\(\/[^:]*\).*/\1/g' # get first path
echo "foo bar baz" | sed 's/\(\b[a-z]\)/\(\1\)/g' # => (f)oo (b)ar (b)az
echo $var | grep -Eq "^[0-9]{1,}$"; echo $? # check if $var is an integer
 -> if [[ $(echo "$var" | grep -Eq "^[0-9]{1,}$"; echo $?) -ne 0 ]]; then echo "$var" is not a number; exit 1; fi
# cacademo || cacafire || img2txt -W 30 -f html tux.png > tux.html || cacaview tux.png
cat /proc/cmdline # view current arguments passed to kernel at boot time
bvi foo.png # binary vim
 -> dhex foo.png
lnav # ncurses-based log file viewer <http://lnav.org/>
pkexec # Execute a command as another user
