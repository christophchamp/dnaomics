# protein-protein docking prep. makefile
# by Christoph Champ, 12-Oct-2006
include /home/champ/bin/makefiles/Makeconfig

# ======================================================================
AWK	= awk
SED	= sed
RM	= rm
TDIR	= "/home/champ/lib/templates"
# ======================================================================
# Clear out pre-defined suffixes
.SUFFIXES:
.SUFFIXES:	.seg .pdb .dat .log .mat .png .fa .fsa

# Download TLSMD logfile for given run
%.tls.log:	%.pdb
	curl http://skuld.bmsc.washington.edu/~tlsmd/jobs/$(shell cat $$(basename $< .pdb).tlsid)/log.txt >$@

# Extract all (20) segments from TLSMD log file
%.seg:	%.tls.log
	$(SED) -n '/^[0-9]/{n;p;}' $< | \
	$(SED) -e 's/  [0-9].*\.\(.*\)//' >$@

# Extract individual segments from the TLSMD log output
SEG	= 01 05 10 20
# OLD: $(SED) 's/[(('$(shell basename $< .seg | sed -r "s/t[A-Z0-9]{4}-[A-Za-z]{3}_//")':)| ]//g' - | \
# R-5cha_A.tls.seg
%.seg.s:	%.seg
	for n in $(SEG);\
	do \
	head -$$(expr $$n - 1) $< | \
	tail -1 | \
	$(SED) 's/[)|;]/\n/g' - | \
	head -$$n | \
	$(SED) 's/[(('$(shell basename $< .tls.seg | sed -r "s/[R|L]-[a-z0-9]{4}_//")':)| ]//g' - | \
	$(SED) 's/-/\t/g' - | \
	sort -nk1 - | \
	$(SED) = - | $(SED) 'N;s/\n/\t/' >$@$$n ;\
	done

# Extract only given chain ATOMs (DO NOT WORK YET!)
#%.pdb.$$:	%.pdb
#	grep -E '^ATOM.* [A-Z]{3} $(shell basename $@ .pdb | sed -r "s/[A-Z0-9].{3}_//") .*' $< >$@

# Download PDB from rcsb (by pdb id)
PDB	= .pdbid
%.pdb:	%.pdbid
	wget http://www.rcsb.org/pdb/files/$(shell basename $< $(PDB)).pdb.gz &
	wait
	gunzip $(shell basename $< $(PDB)).pdb.gz

%-pop.ca:	%.pdb
	grep -E '^ATOM.{8} CA .*' $< >$@

# PDB-to-MATRIX: Translate PDB file x,y,z to contact matrix
%.pdb.mat:	%.pdb
	cat $< | perl -e '$$count=$$i=$$j=0;while($$line=<STDIN>){@line=split(/\s+/,$$line);\
	if($$line=~ /^ATOM/){push @field,[@line];$$count++;}}\
	print("$(shell basename $< .pdb)");for($$i=0;$$i<$$count;$$i++){printf("\tE%-2d",$$i+1);}print("\n");\
	for($$i=0;$$i<$$count;$$i++){printf("E%-2d",$$i+1);for($$j=0;$$j<$$count;$$j++){\
	$$r=sqrt(($$field[$$i][6]-$$field[$$j][6])**2+($$field[$$i][7]-$$field[$$j][7])**2+($$field[$$i][8]-$$field[$$j][8])**2);\
	printf("\t%5.2f",$$r);}print("\n");}' - >$@

# MATRIX-to-PNG: Generate a PNG from a matrix file
%.pdb.mat.png:	%.pdb.mat
	`/home/champ/bin/matrix2png -data $< -size 8:8 -mincolor darkred -maxcolor white -c -r -s -con 4.0 >$@`

# Extract CAs from PDB
%.ca.pdb:	%.pdb
	grep -E '^ATOM.{8} CA .*' $< >$@

# PDB(CAa)-to-MATRIX: Translate PDB file x,y,z to contact matrix (CAs only)
%.ca.pdb.mat:	%.ca.pdb
	cat $< | perl -e 'sub trim($$);$$count=$$i=$$j=$$k=0;\
	while($$line=<STDIN>){@line=split(/\s+/,$$line);if($$line=~/^ATOM/){push @x,[trim(substr($$line,30,8))];\
	push @y,[trim(substr($$line,38,8))];push @z,[trim(substr($$line,46,8))];push @c,[substr($$line,71,1)];$$count++;}}\
	print("$(shell basename $< .pdb.ca)");for($$i=0;$$i<$$count;$$i++){printf("\tE%-2d",$$i+1);}print("\n");\
	for($$i=0;$$i<$$count;$$i++){printf("E%-2d",$$i+1);if($$c[$$i][0] eq "*"){for($$k=0;$$k<$$count;$$k++){printf("\t%5.2f","0.00");}\
	}else{for($$j=0;$$j<$$count;$$j++){if($$c[$$j][0] eq "*"){printf("\t%5.2f","0.00");}else{\
	$$r=sqrt(($$x[$$i][0]-$$x[$$j][0])**2+($$y[$$i][0]-$$y[$$j][0])**2+($$z[$$i][0]-$$z[$$j][0])**2);printf("\t%5.2f",$$r);}}}print("\n");}\
	sub trim($$){my $$string=shift;$$string=~s/^\s+//;$$string=~s/\s+$$//;return $$string;}' - >$@

# MATRIX-to-PNG: Generate a PNG from a matrix file (for CAs)
%.ca.pdb.mat.png:	%.ca.pdb.mat
	`/home/champ/bin/matrix2png -data $< -size 2:2 -mincolor darkred -maxcolor white -s -con 4.0 >$@`

# TLSMD_segments-to-R: Extract start sites for TLSMD predicted segments; formatted for R input
%.seg.R:	%.seg
	for i in $$(gawk '{print $$2}' $<); do (cat $(TDIR)/template_segments.R | sed "s/XXX/$$i/g") >>$@; done

# PDB-to-FASTA(aa): Translate PDB file to FASTA(amino acid) sequence file
%.fa:	%.pdb
	@echo ">$@" >$@ | \
	cat $< | perl -e '$$prevres="";$$prevresnum=0;\
	while(<STDIN>){if(/^ATOM/){if(substr($$_,13,2) eq "CA"){$$currentres=substr($$_,17,3);$$currentresnum=substr($$_,22,5);\
	$$currentresnum=~ s/\s//g;if($$prevres ne $$currentres || $$prevresnum ne $$currentresnum){push(@aas,substr($$_,17,3));}\
	$$prevres=$$currentres;$$prevresnum=$$currentresnum;}}elsif(/^END/){}}\
	%symbols=("ALA","A","CYS","C","ASP","D","GLU","E","PHE","F","GLY","G","HIS","H","ILE","I","LYS","K",\
	"LEU","L","MET","M","MSE","M","ASN","N","PRO","P","GLN","Q","ARG","R","SER","S","THR",\
	"T","VAL","V","TRP","W","TYR","Y","GLX","Z");\
	for($$i=0;$$i<@aas;$$i++){print $$symbols{$$aas[$$i]};}print"\n";' - |\
	sed -e 's/\(.\{60\}\)/\1\n/g' - >>$@

# FASTA(DNA)-to-FASTA(aa): Translate DNA sequences into amino acid sequences
%.fsa:	%.fa
	cat $< | perl -ne 'chomp;push @seq,$$1 if /^(>.*)/;$$dna{$$seq[$$#seq]} .= $$1 if(/^([A-Z]+)$$/);\
	%base2aa=("AAA"=>"K","AAC" =>"N","AAG"=>"K","AAT"=>"N","ACA"=>"T","ACC"=>"T","ACG"=>"T",\
	"ACT"=>"T","AGA"=>"R","AGC"=>"S","AGG"=>"R","AGT"=>"S","ATA"=>"I","ATC"=>"I","ATG"=>"M",\
	"ATT"=>"I","CAA"=>"Q","CAC"=>"H","CAG"=>"Q","CAT"=>"H","CCA"=>"P","CCC"=>"P","CCG"=>"P",\
	"CCT"=>"P","CGA"=>"R","CGC"=>"R","CGG"=>"R","CGT"=>"R","CTA"=>"L","CTC"=>"L","CTG"=>"L",\
	"CTT"=>"L","GAA"=>"E","GAC"=>"D","GAG"=>"E","GAT"=>"D","GCA"=>"A","GCC"=>"A","GCG"=>"A",\
	"GCT"=>"A","GGA"=>"G","GGC"=>"G","GGG"=>"G","GGT"=>"G","GTA"=>"V","GTC"=>"V","GTG"=>"V",\
	"GTT"=>"V","TAA"=>"-","TAC"=>"Y","TAG"=>"-","TAT"=>"Y","TCA"=>"S","TCC"=>"S","TCG"=>"S",\
	"TCT"=>"S","TGA"=>"-","TGC"=>"C","TGG"=>"W","TGT"=>"C","TTA"=>"L","TTC"=>"F","TTG"=>"L","TTT"=>"F");\
	foreach $$s (@seq){print "$$s\n";for($$x=0;$$x<length($$dna{$$s});$$x=$$x+180){$$line=substr($$dna{$$s},$$x,180);\
	for($$y=0;$$y<length($$line);$$y=$$y+3){$$triplet=substr($$line,$$y,3);\
	$$base2aa{$$triplet}="X" unless defined $$base2aa{$$triplet};\
	print $$base2aa{$$triplet} unless $$base2aa{$$triplet} eq "-";}print "\n"}}' >$@

# Download and format (*.fa) all given CPHmodels
%.cph.fa:	%.cph
	for pdbid in $$(cat $< | gawk '{print $$2}' | sort | uniq); do wget http://www.rcsb.org/pdb/files/$$pdbid.pdb.gz; done
	wait
	for pdbid in $$(cat $< | gawk '{print $$2}' | sort | uniq | gawk '{print $$1".pdb.gz"}'); do gunzip $$pdbid; done
	for pdbid in $$(cat $< | gawk '{print $$2}' | sort | uniq); do gmake $$pdbid.fa; done
	for pdbid in $$(cat $< | gawk '{print $$2}' | sort | uniq | gawk '{print $$1".fa"}'); do cat $$pdbid >>$@; done

# Extract from PDB only ATOMs for a given chain
%.cph.ch.all.fa:	%.cph
	for pdbid in $$(cat $< | gawk '{print $$2"."$$4}');\
		do grep -E '^ATOM.* [A-Z]{3} '$$(echo $$pdbid |$(SED) -r "s/.{4}\.//")' .*'\
		$$(echo $$pdbid |$(SED) -r "s/\.[A-Z]//").pdb\
		>$$(echo $$pdbid |sed -r "s/\.[A-Z]//")_$$(echo $$pdbid |$(SED) -r "s/.{4}\.//").pdb;done
	for pdbid in $$(cat $< | gawk '{print $$2"."$$4}');\
		do gmake $$(echo $$pdbid |sed -r "s/\.[A-Z]//")_$$(echo $$pdbid |$(SED) -r "s/.{4}\.//").fa;done
	for pdbid in $$(cat $< | gawk '{print $$2"."$$4}');\
		do cat $$(echo $$pdbid |sed -r "s/\.[A-Z]//")_$$(echo $$pdbid |$(SED) -r "s/.{4}\.//").fa >>$@;done
#==============

clean:
	$(RM) *.fsa

#s/\(HEADER\)\(.*\)\([0-9][0-9].[A-Z].\{2\}.[0-9][0-9]\)[ ]*\([0-9A-Z].\{3\}\).*\(TITLE\)[ ]*\([0-9A-Za-z(].*\)[ ]*/\2,\6,\3,\4/
%.sql:       %.pdblist
	#for pdbid in $$(cat $< | gawk '{print $$1}' | sort | uniq); do wget http://www.rcsb.org/pdb/files/$$pdbid.pdb.gz; done
	#wait
	#for pdbid in $$(cat $< | gawk '{print $$1}' | sort | uniq | gawk '{print $$1".pdb.gz"}'); do gunzip $$pdbid; done
	for pdbid in $$(cat $< | gawk '{print $$1}' | sort | uniq);\
	do\
	head -1 $$pdbid.pdb | sed -e ':a;$$!N;s/\n//;ta\
	s/\(HEADER\)[ ]*\(.*\)\([0-9][0-9].[A-Z].\{2\}.[0-9][0-9]\)[ ]*\([0-9A-Z].\{3\}\).*/\4,\2,\3/;\
	s/^[ \t]*//;s/[ \t]*$$//;s/^/"/;s/$$/"/;s/[ ]*,/","/g;' >>$@;\
	done

# Extract TLS analysis table for given segment (from TLSMD Server)
%.tex:	%.tlsid
	lynx -dump http://skuld.bmsc.washington.edu/~tlsmd/jobs/$(shell cat $<)/ANALYSIS/XXXX_CHAIN$(shell basename $< .tlsid | sed -e "s/[R|L]-[A-Z0-9].\{3\}_\([A-Z]\)/\1/")_ANALYSIS.html |\
	sed -f $(TDIR)/tls_colours.sed |\
	head -20 | tail -5 |\
	sed -f $(TDIR)/tls_rm_colours.sed | sed -e 's/, /,/g' | sed -e 's/ / \& /g' -e 's/$$/\\\\/' >$@

%.report.tex:	%.tex
	cat $(TDIR)/report_head_template.tex | sed 's/REPORTTITLE/'$(shell basename $< .tex)'/g' |\
	cat - \
		$(TDIR)/report_table_head_template.tex \
		$<\
		$(TDIR)/report_table_head_template.tex \
		$(TDIR)/report_tail_template.tex \
	>$@

%.bf.R.epsi:	%.pdb
	cat $(TDIR)/bf_template.R | sed 's/FILENAME/$</g' | R --vanilla
	ps2epsi $<.ps $@

